package com.networkedassets.git4c.infrastructure.plugin.converter.markdown

import net.sourceforge.plantuml.FileFormat
import net.sourceforge.plantuml.FileFormatOption
import net.sourceforge.plantuml.SourceFileReader
import spock.lang.Specification

import java.nio.file.Files
import java.nio.file.Paths

import static com.networkedassets.git4c.test.Utils.getDataFromDirectory

class PumlTest extends Specification {

    def "UML should be converted and added to markdown"() {

        given:
        def resourceDirectory = Paths.get("src/test/resources", "pumlTest/Markdown.md");
        def source = getDataFromDirectory(resourceDirectory.parent)
        def converter = new MarkdownConverterPlugin()
        def puml = Paths.get("src/test/resources", "pumlTest/umls/test.puml")
        def tempDirectory = Files.createTempDirectory("temp").toFile()

        when:
        def data = source.collect { converter.convert(it) }.grep()

        def reader = new SourceFileReader(puml.toFile(), tempDirectory, new FileFormatOption(FileFormat.SVG))
        def image = reader.generatedImages[0].pngFile

        def base64 = Files.readAllBytes(image.toPath()).encodeBase64()
        def webPage = data[0].content
        def xml = new XmlSlurper().parseText(webPage)
        def img = xml.p.img

        then:
        data.size() == 1
        //To check if file was successfully converted
        base64.toString().size() > 20
        //SVG have autogenerated ids inside and we can't just compare two svgs
        img.@src.toString().startsWith("data:image/svg+xml;base64")
        tempDirectory.deleteDir()
    }

}
